package com.example.demo.service;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.example.demo.dto.CommentRequestDto;
import com.example.demo.dto.CommentResponseDto;
import com.example.demo.model.Comment;
import com.example.demo.repository.CommentRepository;

@Service
public class CommentService {

    private final CommentRepository commentRepository;

    // Constructor injection
    public CommentService(CommentRepository commentRepository) {
        this.commentRepository = commentRepository;
    }

    public List<Comment> getAllCommentsOfArticle(String articleName) {
        return commentRepository.findByArticleName(articleName);
    }

    public List<Comment> addComment(CommentRequestDto commentRequest) {

        System.out.println(commentRequest);
        Comment comment = new Comment(
            null, // ID will be auto-generated
            commentRequest.getPostedBy(),
            commentRequest.getText(),
            commentRequest.getArticleName(),
            commentRequest.getUserEmail(),
            commentRequest.getUserIcon(),
            new Date() // Current timestamp
        );

        // set:
        // createdOn, userIcon, userEmail, postedBy ()= req.user.name || req.user.email)
        // returns an updated list of comments, adds canDelete (= req.user.email === comment.userEmail;)
        commentRepository.save(comment);
        return getAllCommentsOfArticle(commentRequest.getArticleName());
    }

    // public Comment addComment(CommentRequestDto requestDto) {
    //     // Create a new Comment object
    //     Comment comment = new Comment(
    //         null, // ID will be generated by MongoDB
    //         requestDto.getPostedBy(),
    //         requestDto.getText(),
    //         requestDto.getArticleName(),
    //         requestDto.getUserEmail(),
    //         new Date() // Set createdOn to the current time
    //     );

    //     // Save to the database
    //     return commentRepository.save(comment);
    // }

    public List<CommentResponseDto> convertToDto(List<Comment> comments, String currentUserEmail) {
        return comments.stream()
                .map(comment -> new CommentResponseDto(
                        comment.getId(),
                        comment.getPostedBy(),
                        comment.getText(),
                        comment.getArticleName(),
                        comment.getUserEmail(),
                        comment.getUserIcon(),
                        comment.getCreatedOn(),
                        canUserDeleteComment(comment, currentUserEmail)
                ))
                .collect(Collectors.toList());
    }

    private boolean canUserDeleteComment(Comment comment, String currentUserEmail) {
        return comment.getUserEmail().equals(currentUserEmail) || isAdmin(currentUserEmail);
    }

    // TODO: adjust for permissions
    private boolean isAdmin(String username) {
        // Placeholder for admin check logic
        return "admin".equals(username);
    }

}
